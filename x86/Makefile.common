#This is a make file with common rules for both x86 & x86-64

all: directories test_cases

cflatobjs += lib/pci.o
cflatobjs += lib/pci-edu.o
cflatobjs += lib/alloc.o
cflatobjs += lib/auxinfo.o
cflatobjs += lib/vmalloc.o
cflatobjs += lib/alloc_page.o
cflatobjs += lib/alloc_phys.o
cflatobjs += lib/x86/setup.o
cflatobjs += lib/x86/io.o
cflatobjs += lib/x86/smp.o
cflatobjs += lib/x86/vm.o
cflatobjs += lib/x86/fwcfg.o
cflatobjs += lib/x86/apic.o
cflatobjs += lib/x86/atomic.o
cflatobjs += lib/x86/desc.o
cflatobjs += lib/x86/isr.o
cflatobjs += lib/x86/acpi.o
cflatobjs += lib/x86/stack.o
cflatobjs += lib/x86/fault_test.o
cflatobjs += lib/x86/delay.o

OBJDIRS += lib/x86

$(libcflat): LDFLAGS += -nostdlib
$(libcflat): CFLAGS += -ffreestanding -I $(SRCDIR)/lib -I lib

COMMON_CFLAGS += -m$(bits)
ifneq ($(WA_DIVIDE),)
COMMON_CFLAGS += -Wa,--divide
endif
COMMON_CFLAGS += -O1

# stack.o relies on frame pointers.
KEEP_FRAME_POINTER := y

# We want to keep intermediate file: %.elf and %.o 
.PRECIOUS: %.elf %.o %.so

FLATLIBS = lib/libcflat.a
%.elf: %.o $(FLATLIBS) $(SRCDIR)/x86/flat.lds $(cstart.o)
	$(CC) $(CFLAGS) -nostdlib -o $@ -Wl,-T,$(SRCDIR)/x86/flat.lds \
		$(filter %.o, $^) $(FLATLIBS)
	@chmod a-x $@

%.flat: %.elf
	$(OBJCOPY) -O elf32-i386 $^ $@
	@chmod a-x $@

%.so: %.o $(FLATLIBS) $(TEST_DIR)/efi_main.o $(cstart.o)
	$(LD) -shared -nostdlib -znocombreloc -Bsymbolic -T $(SRCDIR)/x86/efi.lds $^ \
		-o $@ $(FLATLIBS)
	@chmod a-x $@

%.efi: %.so
	$(OBJCOPY) -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel \
		    -j .rela -j .rel.* -j .rela.* -j .rel* -j .rela* \
		    -j .reloc -j .init --target efi-app-x86_64 $*.so $@
	@chmod a-x $@

tests-flatonly = $(TEST_DIR)/realmode.$(out) $(TEST_DIR)/eventinj.$(out)		\
		$(TEST_DIR)/smap.$(out) $(TEST_DIR)/umip.$(out)

tests-common = $(TEST_DIR)/vmexit.$(out) $(TEST_DIR)/tsc.$(out)				\
		$(TEST_DIR)/smptest.$(out) $(TEST_DIR)/msr.$(out)			\
		$(TEST_DIR)/hypercall.$(out) $(TEST_DIR)/sieve.$(out)			\
		$(TEST_DIR)/kvmclock_test.$(out) $(TEST_DIR)/s3.$(out)			\
		$(TEST_DIR)/pmu.$(out) $(TEST_DIR)/setjmp.$(out)			\
		$(TEST_DIR)/tsc_adjust.$(out) $(TEST_DIR)/asyncpf.$(out)		\
		$(TEST_DIR)/init.$(out) $(TEST_DIR)/hyperv_synic.$(out)			\
		$(TEST_DIR)/hyperv_stimer.$(out) $(TEST_DIR)/hyperv_connections.$(out)	\
		$(TEST_DIR)/tsx-ctrl.$(out)

ifneq ($(CONFIG_EFI),y)
tests-common += $(tests-flatonly)
endif

test_cases: $(tests-common) $(tests)

$(TEST_DIR)/%.o: CFLAGS += -std=gnu99 -ffreestanding -I $(SRCDIR)/lib -I $(SRCDIR)/lib/x86 -I lib

$(TEST_DIR)/realmode.elf: $(TEST_DIR)/realmode.o
	$(CC) -m32 -nostdlib -o $@ -Wl,-m,elf_i386 \
	      -Wl,-T,$(SRCDIR)/$(TEST_DIR)/realmode.lds $^

$(TEST_DIR)/realmode.o: bits = $(if $(call cc-option,-m16,""),16,32)

$(TEST_DIR)/kvmclock_test.elf: $(TEST_DIR)/kvmclock.o

$(TEST_DIR)/hyperv_synic.elf: $(TEST_DIR)/hyperv.o

$(TEST_DIR)/hyperv_stimer.elf: $(TEST_DIR)/hyperv.o

$(TEST_DIR)/hyperv_connections.elf: $(TEST_DIR)/hyperv.o

arch_clean:
	$(RM) $(TEST_DIR)/*.o $(TEST_DIR)/*.$(out) $(TEST_DIR)/*.elf \
	$(TEST_DIR)/.*.d lib/x86/.*.d $(TEST_DIR)/*.so  \
